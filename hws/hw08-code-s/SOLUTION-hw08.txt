                           _________________

                            HW 08 QUESTIONS
                           _________________


- Name: (FILL THIS in)
- X.500: (THE kauf0095 IN kauf0095@umn.edu)

Write your answers to the questions below directly in this text file to
prepare for the associated quiz.


PROBLEM 1: Quote Binary Debugging
=================================

  The two files `quote_main.c' and `quote_data.o' can be compiled
  together to form an executable as in the following.
  ,----
  | > gcc quote_main.c quote_data.o
  | > ./a.out
  | Complete this sentence by C++ creator Bjarne Stroustrup:
  | C makes it easy to shoot yourself in the foot; ...
  | 
  | enter a number from 0 to 15: 2
  | 
  | 2: This is why most programmers are such poor dancers.
  | 
  | Have a nice tall glass of ... NOPE.
  `----
  As in a previous exercise, the intention is to use the debugger to
  detect the correct response. In this case however, the correct
  completion is present in `quote_main.c'. However, one must enter a
  number which selects from several responses in an attempt to match the
  correct completion. It is possible to "brute force" the solution by
  trying all solutions. However, the intent of the activity is to
  explore the running code with the debugger to answer the questions
  below. This will give insight into some stages of the binary bomb
  assignment.


A
~

  Use some binary utility programs to print out the symbols that are
  present in `quote_data.o'.  Review the previous lab if you have
  forgotten programs like `nm' and `objdump' can print symbols in a
  binary object file.  Speculate as to which data might pertain to where
  potential options are stored.


Solution                                                      :solution:
--------

  ,----
  | > nm quote_data.o
  | 0000000000000000 D choices
  | 0000000000000010 D choices_actual
  | 000000000000004b T get_it
  | 0000000000000000 r .LC0
  | 000000000000000b T list_get
  | 0000000000000000 T max_size
  | 0000000000000020 D nodes
  `----
  'choices' seems like a good candidate for the data where the choices
  are stored. 'nodes' sounds interesting as well.


B
~

  The entry point into the assembly code in `quote_data.o' is the
  function `get_it'.  Use either the debugger or a disassembly of the
  object to trace whether this functions performs the entire computation
  or if other functions are also used. Use this along with other
  observations of the content of the `quote_data.o' file to infer what
  kind of data structure the choices are stored in.


Solution                                                      :solution:
--------

  Within the code for `get_it' is a call to `list_get'. This along with
  the fact that there is a `node' name indicates that some sort of
  linked list is present with the choices.


C
~

  Use the debugger to step through the functions in `quote_data.o'.
  Keep in mind that the parameters to the function follow the standard
  convention: 1st param in register `%rdi', second in `%rsi', and so
  forth.  You should be able to identify a loop in a critical function
  in which the choices are present.  Use `print' and `x' commands in gdb
  to examine data pointed to be registers to help identify where the
  correct response is located.

  Keep in mind that often the `testX' instruction is used to determine
  truthy/falsey qualities about a register. This takes several forms
  that were discussed in lecture
  - `testl %edx, %edx' may be used to check if `%edx' is 0 or negative
  - `testq %rax, %rax' may be used to check if `%rax' is a `NULL'
    pointer
  You are likely to see some of the above uses for the test instruction
  while examining the assembly code in `quote_data.o'

  Recall that you can examine memory addresses pointed to registers with
  gdb commands like the following.
  ,----
  | (gdb) x/d $rax   # print memory pointed to by rax as a decimal integer
  | (gdb) x/x $rax   # print memory pointed to by rax as a hex number
  | (gdb) x/s $rax   # print memory pointed to by rax as a string
  `----

  Include what debugger techniques you used in your answer along with
  the index of the correct completion.


Solution                                                      :solution:
--------

  Eventually register rdx holds the index into the list and rax holds a
  pointer to nodes. These can be printed using `x' commands like the
  above.

  The correct response is at position 7.

  ,----
  | > gdb a.out
  | (No debugging symbols found in a.out)
  | (gdb) b list_get
  | Breakpoint 1 at 0x12b5
  | (gdb) run
  | Starting program: /home/kauffman/Dropbox/teaching/2021-F2020/hw/hw08-stack/solution-hw08-2021/a.out 
  | Complete this sentence by C++ creator Bjarne Stroustrup:
  | C makes it easy to shoot yourself in the foot; ...
  | 
  | enter a number from 0 to 15: 14
  | 
  | Breakpoint 1, 0x00005555555552b5 in list_get ()
  | (gdb) disas
  | Dump of assembler code for function list_get:
  | => 0x00005555555552b5 <+0>:	mov    %rdi,%rax
  |    0x00005555555552b8 <+3>:	mov    %esi,%edi
  |    0x00005555555552ba <+5>:	test   %esi,%esi
  |    0x00005555555552bc <+7>:	js     0x5555555552e9 <list_get+52>
  |    0x00005555555552be <+9>:	cmp    %esi,0x8(%rax)
  |    0x00005555555552c1 <+12>:	jle    0x5555555552ef <list_get+58>
  |    0x00005555555552c3 <+14>:	mov    (%rax),%rax
  |    0x00005555555552c6 <+17>:	mov    $0x0,%edx
  |    0x00005555555552cb <+22>:	jmp    0x5555555552d7 <list_get+34>
  |    0x00005555555552cd <+24>:	add    $0x1,%edx
  |    0x00005555555552d0 <+27>:	mov    0x100(%rax),%rax
  |    0x00005555555552d7 <+34>:	test   %rax,%rax
  |    0x00005555555552da <+37>:	setne  %sil
  |    0x00005555555552de <+41>:	cmp    %edi,%edx
  |    0x00005555555552e0 <+43>:	setne  %cl
  |    0x00005555555552e3 <+46>:	test   %cl,%sil
  |    0x00005555555552e6 <+49>:	jne    0x5555555552cd <list_get+24>
  |    0x00005555555552e8 <+51>:	retq   
  |    0x00005555555552e9 <+52>:	mov    $0x0,%eax
  |    0x00005555555552ee <+57>:	retq   
  |    0x00005555555552ef <+58>:	mov    $0x0,%eax
  |    0x00005555555552f4 <+63>:	retq   
  | End of assembler dump.
  | (gdb) b *0x00005555555552d7
  | Breakpoint 2 at 0x5555555552d7
  | (gdb) c
  | Continuing.
  | 
  | Breakpoint 2, 0x00005555555552d7 in list_get ()
  | (gdb) disas
  | Dump of assembler code for function list_get:
  |    0x00005555555552b5 <+0>:	mov    %rdi,%rax
  |    0x00005555555552b8 <+3>:	mov    %esi,%edi
  |    0x00005555555552ba <+5>:	test   %esi,%esi
  |    0x00005555555552bc <+7>:	js     0x5555555552e9 <list_get+52>
  |    0x00005555555552be <+9>:	cmp    %esi,0x8(%rax)
  |    0x00005555555552c1 <+12>:	jle    0x5555555552ef <list_get+58>
  |    0x00005555555552c3 <+14>:	mov    (%rax),%rax
  |    0x00005555555552c6 <+17>:	mov    $0x0,%edx
  |    0x00005555555552cb <+22>:	jmp    0x5555555552d7 <list_get+34>
  |    0x00005555555552cd <+24>:	add    $0x1,%edx
  |    0x00005555555552d0 <+27>:	mov    0x100(%rax),%rax
  | => 0x00005555555552d7 <+34>:	test   %rax,%rax
  |    0x00005555555552da <+37>:	setne  %sil
  |    0x00005555555552de <+41>:	cmp    %edi,%edx
  |    0x00005555555552e0 <+43>:	setne  %cl
  |    0x00005555555552e3 <+46>:	test   %cl,%sil
  |    0x00005555555552e6 <+49>:	jne    0x5555555552cd <list_get+24>
  |    0x00005555555552e8 <+51>:	retq   
  |    0x00005555555552e9 <+52>:	mov    $0x0,%eax
  |    0x00005555555552ee <+57>:	retq   
  |    0x00005555555552ef <+58>:	mov    $0x0,%eax
  |    0x00005555555552f4 <+63>:	retq   
  | End of assembler dump.
  | (gdb) print $edx
  | $1 = 0
  | (gdb) x/s $rax
  | 0x5555555580a0 <nodes>:	"Within C++, there is a much smaller and cleaner language struggling to get out. (It is C.)"
  | (gdb) c
  | Continuing.
  | 
  | Breakpoint 2, 0x00005555555552d7 in list_get ()
  | (gdb) print $edx
  | $2 = 1
  | (gdb) x/s $rax
  | 0x555555558e08 <nodes+3432>:	"C++ is just an abomination. Everything is wrong with it in every way."
  | (gdb) c
  | Continuing.
  | 
  | Breakpoint 2, 0x00005555555552d7 in list_get ()
  | (gdb) print $edx
  | $3 = 2
  | (gdb) x/s $rax
  | 0x5555555584c0 <nodes+1056>:	"This is why most programmers are such poor dancers."
  | (gdb) c
  | Continuing.
  | 
  | Breakpoint 2, 0x00005555555552d7 in list_get ()
  | (gdb) print $edx
  | $4 = 3
  | (gdb) x/s $rax
  | 0x5555555585c8 <nodes+1320>:	"When Dennis Ritchi discovered this, he immediately bought stock in steel-footed boots."
  | (gdb) c
  | Continuing.
  | 
  | Breakpoint 2, 0x00005555555552d7 in list_get ()
  | (gdb) print $edx
  | $5 = 4
  | (gdb) x/s $rax
  | 0x5555555589e8 <nodes+2376>:	"C++ maintains the original spirit of C, that the programmer not the language is in charge."
  | (gdb) c
  | Continuing.
  | 
  | Breakpoint 2, 0x00005555555552d7 in list_get ()
  | (gdb) print $edx
  | $6 = 5
  | (gdb) x/s $rax
  | 0x5555555586d0 <nodes+1584>:	"The only way to do good, efficient, and system-level and portable C++ ends up to limit\nyourself to all the things that are basically available in C."
  | (gdb) c
  | Continuing.
  | 
  | Breakpoint 2, 0x00005555555552d7 in list_get ()
  | (gdb) print $edx
  | $8 = 6
  | (gdb) x/s $rax
  | 0x5555555583b8 <nodes+792>:	"C++ makes it harder, but when you do, it blows away your whole leg."
  | (gdb) c
  | Continuing.
  | 
  | Breakpoint 2, 0x00005555555552d7 in list_get ()
  | (gdb) print $edx
  | $9 = 7
  | (gdb) x/s $rax
  | 0x5555555581a8 <nodes+264>:	"So don't use C."
  | (gdb) 
  | 
  | 
  | 
  | (gdb) break *0x555555554ae3
  | Breakpoint 2 at 0x555555554ae3
  | (gdb) cont
  | Breakpoint 2, 0x0000555555554ae3 in list_get ()
  | 
  | (gdb) disas
  | Dump of assembler code for function list_get:
  |    0x0000555555554ac6 <+0>:     test   %esi,%esi
  |    0x0000555555554ac8 <+2>:     js     0x555555554af6 <list_get+48>
  |    0x0000555555554aca <+4>:     cmp    %esi,0x8(%rdi)
  |    0x0000555555554acd <+7>:     jle    0x555555554afc <list_get+54>
  |    0x0000555555554acf <+9>:     mov    (%rdi),%rax
  |    0x0000555555554ad2 <+12>:    mov    $0x0,%edx
  |    0x0000555555554ad7 <+17>:    jmp    0x555555554ae3 <list_get+29>
  |    0x0000555555554ad9 <+19>:    add    $0x1,%edx
  |    0x0000555555554adc <+22>:    mov    0x100(%rax),%rax
  | => 0x0000555555554ae3 <+29>:    test   %rax,%rax
  |    0x0000555555554ae6 <+32>:    setne  %dil
  |    0x0000555555554aea <+36>:    cmp    %esi,%edx
  |    0x0000555555554aec <+38>:    setne  %cl
  |    0x0000555555554aef <+41>:    test   %cl,%dil
  |    0x0000555555554af2 <+44>:    jne    0x555555554ad9 <list_get+19>
  |    0x0000555555554af4 <+46>:    repz retq 
  |    0x0000555555554af6 <+48>:    mov    $0x0,%eax
  |    0x0000555555554afb <+53>:    retq   
  |    0x0000555555554afc <+54>:    mov    $0x0,%eax
  |    0x0000555555554b01 <+59>:    retq   
  `----


PROBLEM 2: Stack Smashing
=========================

A
~

  Examine the obviously flawed code in `smash1.c'.
  ,----
  |  1  // smash1.c: demonstrates problems with the function call stack
  |  2  #include <stdio.h>
  |  3  
  |  4  void fill_seq(int *a);
  |  5  void demo();
  |  6  
  |  7  int main(){
  |  8    printf("About to do the demo\n");
  |  9    demo();
  | 10    printf("Demo Complete\n");
  | 11    return 0;
  | 12  }
  | 13  
  | 14  void demo(){
  | 15    int arr[4];
  | 16  
  | 17    fill_seq(arr);
  | 18  
  | 19    for(int i=0; i<4; i++){
  | 20      printf("[%d]: %d\n",i,arr[i]);
  | 21    }
  | 22  }
  | 23  
  | 24  #define END 8
  | 25  void fill_seq(int *a){
  | 26    for(int i=0; i<END; i++){
  | 27      a[i] = (i+1)*2;
  | 28    }
  | 29  }
  `----
  Compiling and running this code with gcc on a Linux system (and
  perhaps in other compiler/OS configurations) will yield the following
  kind of behavior.
  ,----
  | > gcc smash1.c
  | > ./a.out
  | About to do the demo
  | [0]: 2
  | [1]: 4
  | [2]: 6
  | [3]: 8
  | --- stack smashing detected ---: <unknown> terminated
  | Aborted (core dumped)
  `----
  Describe the kind of error that is occurring in this code and why it
  is referred to as "stack smashing." Identify which part of the code is
  causing the problem.


Solution                                                      :solution:
--------

  The problem comes from the `fill_seq()' function which goes off the
  end of the stack allocated array in `main()'.  This causes data to be
  written to higher memory locations in the stack clobbering those bytes
  and likely overwriting the return address for `main()'. GCC inserts
  checks for this behavior and will detect it at runtime as "stack
  smashing" due to the involvement of stack values being overwritten.


B
~

  Consider the alternative file `smash2.c'.  Note the similarities to
  the previous program but also slight changes in it.  Compile and run
  this program and report what errors you see. Describe if the errors
  are similar or not and relate these to changes in the program.


Solution                                                      :solution:
--------

  `smash2.c' uses `malloc()' to allocate a similar array of 4 integers
  to be filled in by `fill_seq()'. However, a the behavior is different
  as the changes in the array are not happening in the stack
  anymore. Writing off the end of the array is technically out of bounds
  but will not affect the return address so in most cases the program
  can run to completion as below:
  ,----
  | > gcc smash2.c
  | > ./a.out
  | About to do the demo
  | [0]: 2
  | [1]: 4
  | [2]: 6
  | [3]: 8
  | Demo Complete
  `----

  Writing off the end of the array can cause problems that with the data
  structures used to manage the heap. In some cases, the behavior may
  appear as follows

  ,----
  | > gcc smash2.c
  | > ./a.out
  | About to do the demo
  | malloc(): corrupted top size
  | Aborted (core dumped)
  `----


C
~

  Recompile both smash programs as shown and use Valgrind to run them
  again. Show your output and comment on how much information Valgrind
  provides about each program run and the out-of-bounds array accesses
  that are performed.  Based on your observations, mention which memory
  area Valgrind monitors more effectively.

  ,----
  | > gcc -g smash1.c
  | > valgrind ./a.out
  | ...
  | 
  | > gcc -g smash2.c
  | > valgrind ./a.out
  | ...
  `----


Solution                                                      :solution:
--------

  Running these commands produces the output below.  Generally Valgrind
  monitors Heap activity that is malloc()'d much more rigorously.  This
  is evidenced by the fact that the writing off the end of the
  malloc()'d array in smash2.c yields "Invalid Write" warnings when run
  under Valgrind.

  smash1 on the other hand gives no errors except for the fatal "stack
  smashing" problem so Valgrind is no help in this case.

  #+BEGIN_SRC sh > gcc -g smash1.c > valgrind ./a.out `=8832=' Memcheck,
  a memory error detector `=8832=' Copyright (C) 2002-2017, and GNU
  GPL'd, by Julian Seward et al.  `=8832=' Using Valgrind-3.16.1 and
  LibVEX; rerun with -h for copyright info `=8832=' Command: a.out
  `=8832=' About to do the demo [0]: 2 [1]: 4 [2]: 6 [3]: 8


stack smashing detected ***: terminated
---------------------------------------

  `=8832=' `=8832=' Process terminating with default action of signal 6
  (SIGABRT): dumping core `=8832=' at 0x48B1615: raise (in
  /usr/lib/libc-2.32.so) `=8832=' by 0x489A861: abort (in
  /usr/lib/libc-2.32.so) `=8832=' by 0x48F35E7: __libc_message (in
  /usr/lib/libc-2.32.so) `=8832=' by 0x4983A39: __fortify_fail (in
  /usr/lib/libc-2.32.so) `=8832=' by 0x4983A03: __stack_chk_fail (in
  /usr/lib/libc-2.32.so) `=8832=' by 0x1091EF: demo (smash1.c:22)
  `=8832=' by 0x109172: main (smash1.c:9) `=8832=' `=8832=' HEAP
  SUMMARY: `=8832=' in use at exit: 0 bytes in 0 blocks `=8832=' total
  heap usage: 1 allocs, 1 frees, 1,024 bytes allocated `=8832=' `=8832='
  All heap blocks were freed -- no leaks are possible `=8832=' `=8832='
  For lists of detected and suppressed errors, rerun with: -s `=8832='
  ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0) Aborted
  (core dumped)


  > gcc -g smash2.c valgrind ./a.out `=8848=' Memcheck, a memory error
  > detector `=8848=' Copyright (C) 2002-2017, and GNU GPL'd, by Julian
  > Seward et al.  `=8848=' Using Valgrind-3.16.1 and LibVEX; rerun with
  > -h for copyright info `=8848=' Command: a.out `=8848=' About to do
  > the demo `=8848=' Invalid write of size 4 `=8848=' at 0x109233:
  > fill_seq (smash2.c:28) `=8848=' by 0x1091B7: demo (smash2.c:17)
  > `=8848=' by 0x109182: main (smash2.c:9) `=8848=' Address 0x4a40490
  > is 0 bytes after a block of size 16 alloc'd `=8848=' at 0x483A77F:
  > malloc (vg_replace_malloc.c:307) `=8848=' by 0x1091A7: demo
  > (smash2.c:15) `=8848=' by 0x109182: main (smash2.c:9) `=8848=' [0]:
  > 2 [1]: 4 [2]: 6 [3]: 8 Demo Complete `=8848=' `=8848=' HEAP SUMMARY:
  > `=8848=' in use at exit: 0 bytes in 0 blocks `=8848=' total heap
  > usage: 2 allocs, 2 frees, 1,040 bytes allocated `=8848=' `=8848='
  > All heap blocks were freed -- no leaks are possible `=8848='
  > `=8848=' For lists of detected and suppressed errors, rerun with: -s
  > `=8848=' ERROR SUMMARY: 4 errors from 1 contexts (suppressed: 0 from
  > 0) #+END_SRC


  ,----
  | > gcc -g smash1.c
  | > valgrind ./a.out
  | ==8522== Memcheck, a memory error detector
  | ==8522== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
  | ==8522== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
  | ==8522== Command: ./a.out
  | ==8522== 
  | [0]: 2
  | [1]: 4
  | [2]: 6
  | [3]: 8
  |   *** stack smashing detected ***: terminated
  | ==8522== 
  | ==8522== Process terminating with default action of signal 6 (SIGABRT): dumping core
  | ==8522==    at 0x48B1615: raise (in /usr/lib/libc-2.32.so)
  | ==8522==    by 0x489A861: abort (in /usr/lib/libc-2.32.so)
  | ==8522==    by 0x48F35E7: __libc_message (in /usr/lib/libc-2.32.so)
  | ==8522==    by 0x4983A39: __fortify_fail (in /usr/lib/libc-2.32.so)
  | ==8522==    by 0x4983A03: __stack_chk_fail (in /usr/lib/libc-2.32.so)
  | ==8522==    by 0x1091B6: main (smash1.c:16)
  | ==8522== 
  | ==8522== HEAP SUMMARY:
  | ==8522==     in use at exit: 0 bytes in 0 blocks
  | ==8522==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
  | ==8522== 
  | ==8522== All heap blocks were freed -- no leaks are possible
  | ==8522== 
  | ==8522== For lists of detected and suppressed errors, rerun with: -s
  | ==8522== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
  | Aborted (core dumped)
  | 
  | 
  | > gcc -g smash2.c
  | > valgrind ./a.out
  | ==8540== Memcheck, a memory error detector
  | ==8540== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
  | ==8540== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
  | ==8540== Command: ./a.out
  | ==8540== 
  | ==8540== Invalid write of size 4
  | ==8540==    at 0x1091FA: fill_seq (smash2.c:21)
  | ==8540==    by 0x10917A: main (smash2.c:9)
  | ==8540==  Address 0x4a40050 is 0 bytes after a block of size 16 alloc'd
  | ==8540==    at 0x483A77F: malloc (vg_replace_malloc.c:307)
  | ==8540==    by 0x10916A: main (smash2.c:7)
  | ==8540== 
  | [0]: 2
  | [1]: 4
  | [2]: 6
  | [3]: 8
  | ==8540== 
  | ==8540== HEAP SUMMARY:
  | ==8540==     in use at exit: 0 bytes in 0 blocks
  | ==8540==   total heap usage: 2 allocs, 2 frees, 1,040 bytes allocated
  | ==8540== 
  | ==8540== All heap blocks were freed -- no leaks are possible
  | ==8540== 
  | ==8540== For lists of detected and suppressed errors, rerun with: -s
  | ==8540== ERROR SUMMARY: 4 errors from 1 contexts (suppressed: 0 from 0)
  | 
  `----
