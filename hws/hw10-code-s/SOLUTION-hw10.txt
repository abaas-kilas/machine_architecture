                           _________________

                            HW 10 QUESTIONS
                           _________________


- Name: (FILL THIS in)
- X.500: (THE kauf0095 IN kauf0095@umn.edu)

Write your answers to the questions below directly in this text file to
prepare for the associated quiz.


Important: Run on csel-kh1250-NN
================================

  The provided code that you will analyze is meant to demonstrate some
  interesting facets of hardware. Different hardware will give different
  results. To make sure your results are consistent with the
  expectations *run your code on csel-kh1250-NN.cselabs.umn.edu*
  machines. These machines are number `csel-kh1250-01' to
  `csel-kh1250-37'.  You can log in using
  ,----
  | > ssh kauf0095@csel-kh1250-07.cselabs.umn.edu
  `----

  or something similar, adjusting the final number from 07 to any number
  01 to 37.

  Use your X.500 username/password to get access. All CSE labs machines
  share the same home directory so any code you download to Vole or a
  physical lab machine will be available on all machines.

  Importantly, expect INCONSISTENT RESULTS in the following environments
  - VOLE: this is a virtualized environment, not real hardware. Results
    are likely to vary from one run to the next
  - apollo.cselabs.umn.edu: This is also a virtualized environment and
    will not produce consistent results.
  - Personal machines: hardware will vary for you on your own
    machine. Results may be faster, slower, consistent with those above
    or very different. It is may be interesting to compare the results
    on your own machine to those on the test machines.


Compiling and Timing
====================

  Use the provided Makefile to compile as in
  ,----
  | > make
  | gcc -Wall -g -Og -c superscalar_main.c		
  | gcc -Wall -g -Og -c superscalar_funcs.c		
  | gcc -Wall -g -Og -o superscalar_main superscalar_main.o superscalar_funcs.o		
  `----
  The compilation uses `-Og' (debug level optimization) which is
  necessary to stop the compiler from modifying some loops.

  This will produce the `superscalar_main' program which has the
  following usage:
  ,----
  | > ./superscalar_main
  | usage: ./superscalar_main <MULT> <EXP> <ALG>
  |   <MULT> and <ALG> are integers, iterates for MULT * 2^{EXP} iterations
  |   <ALG> is one of
  |          add1_diff : add 1 times in loop
  |          add2_diff : add 2 times in same loop; different destinations
  |          add3_diff : add 3 times in same loop; different destinations
  |          add2_same : add 2 times in same loop; same destinations
  |          mul1_diff : multiply 1 times in loop
  |          mul2_diff : multiply 2 times in same loop; different destinations
  |          mul3_diff : multiply 3 times in same loop; different destinations
  |          mul4_diff : multiply 4 times in same loop; different destinations
  |          mul2_same : multiply 2 times in same loop; same destinations
  | add1_then_mul_diff : add and multiply in different loops; different destinations
  | add1_then_mul_same : add and multiply in different loops; same destinations
  |  add2_and_mul_diff : add twice and multiply in the same loop; different destinations
  |  add2_and_mul_same : add twice and multiply in the same loop; same destination 
  `----

  Experiment with algorithm `add1_diff' and parameters `MULT' and `EXP'
  which control the number of iterations run. Experiment until you get a
  run time of about 1 second such as MULT=1 and EXP=32 on kh-1250-01.
  ,----
  | kh-1250-01> time ./superscalar_main 1 32 add1_diff 
  | add1_diff for 18 * 2^{27} = 2415919104 iterations... complete
  | 
  | real    0m1.010s                                                                                                                                                                                                                  
  | user    0m1.009s                                                                                                                                                                                                                  
  | sys     0m0.000s      
  `----


Solution on kh-1250-01                                        :solution:
----------------------

  Times for kh1250-XX machines Parameters mul=1 exp=32

  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   Test                   1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31    32    33    34    35    36    37 
  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   add1_diff           1.09  1.07  1.08  1.08  1.08  1.08  1.08  1.08  1.08  1.08  1.09  1.08  1.08  1.08  1.08  1.08  1.08  1.08  1.08  1.07  1.08  1.08  1.08  1.08  1.08  1.08  1.08  1.08  1.07  1.08  1.07  1.07  1.08  1.24  1.08  1.08  1.08 
   add2_diff           1.08  1.08  1.08  1.07  1.08  1.09  1.08  1.08  1.08  1.08  1.08  1.08  1.08  1.08  1.07  1.08  1.07  1.07  1.08  1.08  1.08  1.08  1.07  1.08  1.08  1.08  1.08  1.08  1.07  1.08  1.07  1.07  1.08  1.28  1.08  1.07  1.08 
   add3_diff           1.65  1.65  1.64  1.65  1.64  1.64  1.65  1.64  1.65  1.63  1.67  1.65  1.75  1.65  1.66  1.64  1.64  1.65  1.65  1.63  1.64  1.64  1.63  1.64  1.65  1.64  1.64  1.64  1.64  1.66  1.64  1.64  1.64  1.95  1.66  1.64  1.64 
   add2_same           2.15  2.15  2.15  2.15  2.15  2.15  2.15  2.15  2.15  2.15  2.16  2.15  2.15  2.15  2.15  2.15  2.15  2.16  2.16  2.15  2.16  2.15  2.16  2.15  2.15  2.15  2.16  2.15  2.15  2.16  2.15  2.16  2.17  2.37  2.15  2.16  2.16 
   mul1_diff           3.23  3.24  3.23  3.23  3.23  3.24  3.23  3.23  3.23  3.31  3.25  3.23  3.23  3.23  3.22  3.23  3.23  3.24  3.24  3.23  3.23  3.23  3.23  3.25  3.24  3.24  3.23  3.23  3.23  3.23  3.24  3.23  3.23  3.53  3.23  3.23  3.24 
   mul2_diff           3.23  3.23  3.23  3.23  3.23  3.23  3.27  3.23  3.23  3.29  3.26  3.25  3.24  3.24  3.23  3.23  3.25  3.23  3.23  3.23  3.24  3.23  3.23  3.23  3.23  3.23  3.23  3.23  3.23  3.23  3.24  3.23  3.23  3.54  3.23  3.23  3.24 
   mul3_diff           3.23  3.23  3.23  3.23  3.23  3.23  3.23  3.23  3.23  3.23  3.24  3.25  3.23  3.23  3.24  3.23  3.24  3.23  3.24  3.23  3.23  3.23  3.23  3.25  3.23  3.23  3.23  3.23  3.23  3.23  3.23  3.23  3.24  3.58  3.23  3.23  3.24 
   mul2_same           6.46  6.46  6.46  6.46  6.47  6.47  6.47  6.46  6.48  6.47  6.48  6.46  6.46  6.46  6.47  6.46  6.46  6.46  6.49  6.47  6.47  6.48  6.47  6.46  6.47  6.47  6.48  6.48  6.49  6.47  6.47  6.47  6.47  7.03  6.46  6.46  6.48 
   add2_and_mul_diff   3.23  3.24  3.24  3.23  3.24  3.26  3.23  3.23  3.23  3.27  3.25  3.23  3.23  3.24  3.23  3.24  3.23  3.24  3.25  3.23  3.24  3.24  3.23  3.23  3.23  3.24  3.24  3.24  3.23  3.24  3.23  3.23  3.23  3.59  3.23  3.23  3.25 
   add1_then_mul_diff  4.31  4.31  4.34  4.31  4.31  4.31  4.31  4.31  4.32  4.33  4.31  4.31  4.31  4.30  4.31  4.34  4.31  4.31  4.32  4.31  4.31  4.31  4.31  4.31  4.33  4.31  4.31  4.31  4.31  4.31  4.31  4.31  4.30  4.79  4.31  4.32  4.31 
   add1_then_mul_same  4.34  4.31  4.33  4.44  4.32  4.31  4.31  4.31  4.31  4.32  4.35  4.32  4.32  4.33  4.37  4.33  4.32  4.31  4.33  4.34  4.32  4.31  4.35  4.32  4.31  4.32  4.31  4.31  4.31  4.31  4.31  4.31  4.31  4.75  4.36  4.31  4.32 
   add2_and_mul_same   5.39  5.39  5.38  5.40  5.38  5.38  5.39  5.38  5.41  5.39  5.38  5.38  5.38  5.38  5.38  5.38  5.38  5.39  5.41  5.39  5.38  5.44  5.39  5.41  5.40  5.40  5.39  5.39  5.44  5.38  5.41  5.39  5.39  5.90  5.38  5.39  5.39 
  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  ----------------------------
   Test                     1 
  ----------------------------
   add1_diff             1.09 
   add2_diff             1.08 
   add3_diff             1.65 
   add2_same             2.15 
   mul1_diff             3.23 
   mul2_diff             3.23 
   mul3_diff             3.23 
   mul4_diff (late add)  4.32 
   mul2_same             6.46 
   add1_then_mul_diff    4.31 
   add2_and_mul_diff     3.23 
   add1_then_mul_same    4.34 
   add2_and_mul_same     5.39 
  ----------------------------


PROBLEM 1: Addition
===================

(A) add1_diff / add2_diff / add3_diff
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Examine the source code in `superscalar_funcs.c' for the following
  algorithms.
  - add1_diff : add 1 times in loop
  - add2_diff : add 2 times in same loop; different destinations
  - add3_diff : add 3 times in same loop; different destinations
  Note that each does some additions in a loop. Time each of these WITH
  THE SAME MULT/EXP parameters and show your timings. Describe how the
  timings compare and speculate on why.

  Note that all of these involve incrementing a counter (`i++') so the
  number of additions is one greater than the algorithm name suggests.


Solution On kh-1250-01                                        :solution:
----------------------

  ,----
  | > time ./superscalar_main 1 32 add1_diff
  | add1_diff for 1 * 2^{32} = 4294967296 iterations... complete
  | user 1.09
  | ...
  `----

  -----------------
   Test          1 
  -----------------
   add1_diff  1.09 
   add2_diff  1.08 
   add3_diff  1.65 
  -----------------

  The Intel CPU is able to perform multiple additions per cycle so long
  as the destination registers are different. This is why add1_diff and
  add2_diff have identical times.  There are limits as the 3 addition
  add3_diff starts to take more time.

  The other results below show some different behaviors for other
  machines


* APOLLO

  ,----
  | csel-apollo [solution-lab09-2021]% time ./superscalar_main add1_diff 1 30
  | add1_diff for 1 * 2^{30} = 1073741824 iterations... complete
  | 
  | real	0m0.989s
  | user	0m0.984s
  | sys	0m0.000s
  | csel-apollo [solution-lab09-2021]% time ./superscalar_main add2_diff 1 30
  | add2_diff for 1 * 2^{30} = 1073741824 iterations... complete
  | 
  | real	0m1.351s
  | user	0m1.352s
  | sys	0m0.000s
  | csel-apollo [solution-lab09-2021]% time ./superscalar_main add3_diff 1 30
  | add3_diff for 1 * 2^{30} = 1073741824 iterations... complete
  | 
  | real	0m1.687s
  | user	0m1.684s
  | sys	0m0.000s
  `----


* HOME LAPTOP

  Timings done on a home laptop using params MULT=3 EXP=30.

  ,----
  | > time ./superscalar_main add1_diff 3 30
  | add1_diff for 3 * 2^{30} = 3221225472 iterations... complete
  | 
  | real	0m1.076s
  | user	0m1.072s
  | sys	0m0.001s
  | > time ./superscalar_main add2_diff 3 30
  | add2_diff for 3 * 2^{30} = 3221225472 iterations... complete
  | 
  | real	0m1.455s
  | user	0m1.451s
  | sys	0m0.001s
  | > time ./superscalar_main add3_diff 3 30
  | add3_diff for 3 * 2^{30} = 3221225472 iterations... complete
  | 
  | real	0m2.043s
  | user	0m2.038s
  | sys	0m0.002s
  `----

  Each addition adds on a half second and the performance appears to
  scale linearly
   add1_diff  2 additions  1 sec   
   add2_diff  3 additions  1.5 sec 
   add3_diff  4 additions  2.0 sec 


* ON VOLE

  Unreliable due to the virtualized environment

  ,----
  | vole01$ time ./superscalar_main add1_diff 1 31
  | add1_diff for 1 * 2^{31} = 2147483648 iterations... complete
  | 
  | real	0m0.870s
  | user	0m0.864s
  | sys	0m0.000s
  | 
  | vole01$ time ./superscalar_main add2_diff 1 31
  | add2_diff for 1 * 2^{31} = 2147483648 iterations... complete
  | 
  | real	0m0.773s
  | user	0m0.768s
  | sys	0m0.000s
  | 
  | vole01$ time ./superscalar_main add3_diff 1 31
  | add3_diff for 1 * 2^{31} = 2147483648 iterations... complete
  | 
  | real	0m1.170s
  | user	0m1.164s
  | sys	0m0.000s
  `----

  These timings a bit strange but the fact that doing several additions
  does not alter the time linearly suggests that some of the additions
  are happening in parallel, a feature of superscalar processors.


(B) add2_diff / add2_same
~~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the source code of the two algorithms below.
  - add1_diff : add 1 times in loop
  - add2_diff : add 2 times in same loop; different destinations
  - add2_same : add 2 times in same loop; same destinations
  Note that the only difference between the add2_X algorithms is that
  the destination for the results.

  Compare timings for these and speculate on the reasons for any
  unexpected results.


Solution on kh-1250-01                                        :solution:
----------------------

  Adding to the same register repeatedly stalls the processor pipeline
  on many architectures which leads to some slow down as seen in the
  timings below where add2_diff is faster than add2_same.

  -----------------
   Test          1 
  -----------------
   add2_diff  1.08 
   add2_same  2.15 
  -----------------

  OTHER ENVIRONMENTS:


* APOLLO

  ,----
  | csel-apollo [solution-lab09-2021]% time ./superscalar_main add2_diff 1 30
  | add2_diff for 1 * 2^{30} = 1073741824 iterations... complete
  | 
  | real	0m1.351s
  | user	0m1.344s
  | sys	0m0.004s
  | csel-apollo [solution-lab09-2021]% time ./superscalar_main add2_same 1 30
  | add2_same for 1 * 2^{30} = 1073741824 iterations... complete
  | 
  | real	0m1.523s
  | user	0m1.516s
  | sys	0m0.000s
  `----


* HOME LAPTOP

  ,----
  | > time ./superscalar_main add1_diff 3 30
  | add1_diff for 3 * 2^{30} = 3221225472 iterations... complete
  | 
  | real	0m1.076s
  | user	0m1.072s
  | sys	0m0.003s
  | 
  | > time ./superscalar_main add2_diff 3 30
  | add2_diff for 3 * 2^{30} = 3221225472 iterations... complete
  | 
  | real	0m1.453s
  | user	0m1.448s
  | sys	0m0.003s
  | 
  | > time ./superscalar_main add2_same 3 30
  | add2_same for 3 * 2^{30} = 3221225472 iterations... complete
  | 
  | real	0m2.039s
  | user	0m2.034s
  | sys	0m0.002s
  | 
  `----
  The performance difference between add2_diff and add2_same is likely
  due to pipeline effects. Since there is no dependency between the
  additions in add2_diff, the can be done somewhat in parallel.  When
  the destination is the same in add2_same, they must execute serially
  so that the time to do the additions is twice as much.


PROBLEM 2: Multiplication
=========================

(A) add1_diff / mul1_diff
~~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the following two algorithms.
  - add1_diff : add 1 times in loop
  - mul1_diff : multiply 1 times in loop
  Time them on the same parameters and speculate on the timing
  differences.


Solution on kh-1250-01                                        :solution:
----------------------

  -----------------
   Test          1 
  -----------------
   add1_diff  1.09 
   mul1_diff  3.23 
  -----------------
  The multiplication algorithm is about 3-times longer than the
  addition. This is due to multiplication taking 3 cycles on many
  processors while addition takes 1.


  OTHER MACHINES


* APOLLO

  ,----
  | csel-apollo [solution-lab09-2021]% time ./superscalar_main add1_diff 1 30
  | add1_diff for 1 * 2^{30} = 1073741824 iterations... complete
  | 
  | real	0m0.988s
  | user	0m0.984s
  | sys	0m0.000s
  | csel-apollo [solution-lab09-2021]% time ./superscalar_main mul1_diff 1 30
  | mul1_diff for 1 * 2^{30} = 1073741824 iterations... complete
  | 
  | real	0m3.373s
  | user	0m3.368s
  | sys	0m0.000s
  `----


* HOME LAPTOP AND APOLLO

  ,----
  | > time ./superscalar_main add1_diff 3 30
  | add1_diff for 3 * 2^{30} = 3221225472 iterations... complete
  | 
  | real	0m1.074s
  | user	0m1.071s
  | sys	0m0.000s
  | 
  | > time ./superscalar_main mul1_diff 3 30
  | mul1_diff for 3 * 2^{30} = 3221225472 iterations... complete
  | 
  | real	0m3.066s
  | user	0m3.060s
  | sys	0m0.001s
  `----


(B) mul1_diff / mul2_diff / mul3_diff / mul4_diff
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the following two algorithms.
  - mul1_diff : multiply 1 times in loop
  - mul2_diff : multiply 2 times in same loop; different destinations
  - mul3_diff : multiply 3 times in same loop; different destinations
  - mul4_diff : multiply 4 times in same loop; different destinations
  Time them on the same parameters and speculate on the timing
  differences.


Solution on kh-1250-01                                        :solution:
----------------------

  -----------------
   Test          1 
  -----------------
   mul1_diff  3.23 
   mul2_diff  3.23 
   mul3_diff  3.23 
   mul4_diff  4.32 
  -----------------
  mul1_diff, mul2_diff and mul3_diff are identical in timing likely due
  to multiplication using a staged pipeline on the processor. mul4_diff
  is longer leading one to conclude that possibly a 3-stage pipeline is
  used on the processor.


* APOLLO

  mul1_diff and mul2_diff are identical in timing likely due to
  multiplication using a staged pipeline on the processor. mul3_diff is
  longer leading one to conclude that possibly a 2-stage pipeline is
  used on apollo's processor.

  ,----
  | csel-apollo [solution-lab09-2021]% time ./superscalar_main mul1_diff 1 30
  | mul1_diff for 1 * 2^{30} = 1073741824 iterations... complete
  | 
  | real	0m3.372s
  | user	0m3.368s
  | sys	0m0.000s
  | csel-apollo [solution-lab09-2021]% time ./superscalar_main mul2_diff 1 30
  | mul2_diff for 1 * 2^{30} = 1073741824 iterations... complete
  | 
  | real	0m3.372s
  | user	0m3.368s
  | sys	0m0.000s
  | csel-apollo [solution-lab09-2021]% time ./superscalar_main mul3_diff 1 30
  | mul3_diff for 1 * 2^{30} = 1073741824 iterations... complete
  | 
  | real	0m4.047s
  | user	0m4.040s
  | sys	0m0.000s
  `----


* HOME LAPTOP

  The times for doing 1, 2, or 3 multiplications are nearly identical.
  This is explained by multiplication being strongly pipelined so that
  that there is little more cost doing more multiplications beyond the
  first: each one completes one cycle after the next.

  ,----
  | > time ./superscalar_main mul1_diff 3 30
  | mul1_diff for 3 * 2^{30} = 3221225472 iterations... complete
  | 
  | real	0m3.056s
  | user	0m3.047s
  | sys	0m0.003s
  | > time ./superscalar_main mul2_diff 3 30
  | mul2_diff for 3 * 2^{30} = 3221225472 iterations... complete
  | 
  | real	0m3.051s
  | user	0m3.045s
  | sys	0m0.001s
  | > time ./superscalar_main mul3_diff 3 30
  | mul3_diff for 3 * 2^{30} = 3221225472 iterations... complete
  | 
  | real	0m3.088s
  | user	0m3.082s
  | sys	0m0.001s
  `----


(C) mul1_diff / mul2_diff / mul2_same
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the following two algorithms.
  - mul1_diff : multiply 1 times in loop
  - mul2_diff : multiply 2 times in same loop; different destinations
  - mul2_same : multiply 2 times in same loop; same destinations
  Time them on the same parameters and speculate on the timing
  differences.


Solution on kh-1250-01                                        :solution:
----------------------

  While mul1_diff and mul2_diff take the same amount of time, mul2_same
  has a data dependency so cannot be pipelined between iterations. This
  means it takes twice as long as doing a single multiplication.
  -----------------
   Test          1 
  -----------------
   mul2_diff  3.23 
   mul2_same  6.46 
  -----------------


  OTHER MACHINES:


* APOLLO

  ,----
  | csel-apollo [solution-lab09-2021]% time ./superscalar_main mul1_diff 1 30
  | mul1_diff for 1 * 2^{30} = 1073741824 iterations... complete
  | 
  | real	0m3.374s
  | user	0m3.368s
  | sys	0m0.000s
  | csel-apollo [solution-lab09-2021]% time ./superscalar_main mul2_diff 1 30
  | mul2_diff for 1 * 2^{30} = 1073741824 iterations... complete
  | 
  | real	0m3.371s
  | user	0m3.364s
  | sys	0m0.004s
  | csel-apollo [solution-lab09-2021]% time ./superscalar_main mul2_same 1 30
  | mul2_same for 1 * 2^{30} = 1073741824 iterations... complete
  | 
  | real	0m6.739s
  | user	0m6.736s
  | sys	0m0.000s
  `----


* HOME LAPTOP

  ,----
  | # HOME LAPTOP
  | > time ./superscalar_main mul1_diff 3 30
  | mul1_diff for 3 * 2^{30} = 3221225472 iterations... complete
  | 
  | real	0m3.060s
  | user	0m3.053s
  | sys	0m0.002s
  | > time ./superscalar_main mul2_diff 3 30
  | mul2_diff for 3 * 2^{30} = 3221225472 iterations... complete
  | 
  | real	0m3.052s
  | user	0m3.043s
  | sys	0m0.003s
  | > time ./superscalar_main mul2_same 3 30
  | mul2_same for 3 * 2^{30} = 3221225472 iterations... complete
  | 
  | real	0m6.131s
  | user	0m6.119s
  | sys	0m0.002s
  `----


PROBLEM 3: Combined Addition/Multiplication
===========================================

(A) add1_then_mul_diff / add2_and_mul_diff
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the following two algorithms.
  - add1_then_mul_diff : add and multiply in different loops; different
    destinations
  - add2_and_mul_diff : add twice and multiply in the same loop;
    different destinations
  Note that each loop involves incrementing a counter so both of the
  above algorithms should do the same number of operations for N
  iterations:
  ------------------------------------------------
                       loop        total  overall 
   Algorithm           incr  adds  adds   total   
  ------------------------------------------------
   add1_then_mul_diff  2*N   1*N   3*N    4*N     
   add2_and_mul_diff   1*N   2*N   3*N    4*N     
  ------------------------------------------------

  Time these algorithms on the same parameters and speculate on the
  timing differences.

  Compare the timings to your earlier results for add1_diff and
  mul1_diff.


Solution on kh-1250-01                                        :solution:
----------------------

  --------------------------
   Test                   1 
  --------------------------
   add1_then_mul_diff  4.31 
   add2_and_mul_diff   3.23 
  --------------------------
   add1_diff           1.09 
   mul1_diff           3.23 
  --------------------------

  Adding once in a loop then multiplying in a loop has essentially the
  time cost of add1_diff + mul1_diff.

  However, if the adding is moved into the same loop as the multiply,
  additions can happen simultaneously with multiplications due to the
  superscalar nature of the processor. This means the combined loop has
  the same cost as just multiplying (mul1_diff).

  OTHER MACHINES:


* APOLLO

  ,----
  | csel-apollo [solution-lab09-2021]% time ./superscalar_main add1_then_mul_diff 1 30
  | add1_then_mul_diff for 1 * 2^{30} = 1073741824 iterations... complete
  | 
  | real	0m4.341s
  | user	0m4.328s
  | sys	0m0.008s
  | csel-apollo [solution-lab09-2021]% time ./superscalar_main add2_and_mul_diff 1 30
  | add2_and_mul_diff for 1 * 2^{30} = 1073741824 iterations... complete
  | 
  | real	0m3.374s
  | user	0m3.368s
  | sys	0m0.000s
  `----


* HOME LAPTOP

  ,----
  | > time ./superscalar_main add1_then_mul_diff 9 28
  | add1_then_mul_diff for 9 * 2^{28} = 2415919104 iterations... complete
  | 
  | real	0m4.095s
  | user	0m4.082s
  | sys	0m0.003s
  | 
  | > time ./superscalar_main add2_and_mul_diff 9 28
  | add2_and_mul_diff for 9 * 2^{28} = 2415919104 iterations... complete
  | 
  | real	0m3.047s
  | user	0m3.039s
  | sys	0m0.000s
  `----


(B) Table of Timings
~~~~~~~~~~~~~~~~~~~~

  Consider table of algorithm variants given below.  Part A of this
  question compared two of these algorithms. Add their times into the
  table below under the 'User Time' column then time the other two
  algorithms to complete the table of timings. The table will be
  analyzed in the next part.

  ---------------------------------------------
           Memory                         User 
   #Loops  Locations  Algorithm           Time 
  ---------------------------------------------
        2  Different  add1_then_mul_diff       
        1  Different  add2_and_mul_diff        
        2  Same       add1_then_mul_same       
        1  Same       add2_and_mul_same        
  ---------------------------------------------


Solution on kh-1250-01                                        :solution:
----------------------

  ---------------------------------------------
           Memory                         User 
   #Loops  Locations  Algorithm           Time 
  ---------------------------------------------
        2  Different  add1_then_mul_diff  4.31 
        1  Different  add2_and_mul_diff   3.23 
        2  Same       add1_then_mul_same  4.34 
        1  Same       add2_and_mul_same   5.39 
  ---------------------------------------------


  OTHER MACHINES


* APOLLO

  ----------------------------------------------
           Memory                          User 
   #Loops  Locations  Algorithm            Time 
  ----------------------------------------------
        2  Different  add1_then_mul_diff  4.341 
        1  Different  add2_and_mul_diff   3.368 
        2  Same       add1_then_mul_same  4.324 
        1  Same       add2_and_mul_same   6.060 
  ----------------------------------------------


(C) Table Analysis
~~~~~~~~~~~~~~~~~~

  Explain why the following observations can be made about the timing
  table from part B.

   Alg1                vs  Alg2                Reason 
  ----------------------------------------------------
   add1_then_mul_diff  =   add1_then_mul_same  ??     
   add2_and_mul_diff   <   add2_and_mul_same   ??     
   add1_then_mul_diff  >   add2_and_mul_diff   ??     
   add1_then_mul_same  <   add2_and_mul_same   ??     


Solution                                                      :solution:
--------

   Alg1                vs  Alg2                Reason                                                                                                               
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------
   add1_then_mul_diff  =   add1_then_mul_same  No conflicts in memory due to different loops, same # of arithmetic means same time                                  
   add2_and_mul_diff   <   add2_and_mul_same   Writing to same memory location slows down throughput, different locations run faster, allow parallel add + multiply 
   add1_then_mul_diff  >   add2_and_mul_diff   No memory conflicts in either, multiple arithmetic ops in same loop allows superscalar in second                     
   add1_then_mul_same  <   add2_and_mul_same   Different loops means no conflict despite same memory location: writing at different times                           
